package com.oco.onlinecourseorganizer.service;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfWriter;
import com.oco.onlinecourseorganizer.model.AppUser;
import com.oco.onlinecourseorganizer.model.Course;
import com.oco.onlinecourseorganizer.repository.CourseRepository;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.ByteArrayOutputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

/**
 * Service responsible for generating PDF certificates for completed courses.
 * The certificate includes the student's email, course name, and a QR code that
 * links to a validation URL via an external QR API.
 */
@Service
public class CertificateService {

    private final CourseRepository courseRepository;

    public CertificateService(CourseRepository courseRepository) {
        this.courseRepository = courseRepository;
    }

    /**
     * Generates a certificate in PDF format for a student who completed a
     * course.
     *
     * @param courseId the ID of the completed course
     * @param student the student who completed the course
     * @return a ByteArrayResource containing the generated PDF
     */
    public ByteArrayResource generateCertificate(Long courseId, AppUser student) {
        try {
            // 1. Retrieve course data
            Course course = courseRepository.findById(courseId)
                    .orElseThrow(() -> new RuntimeException("Course not found"));

            // 2. Prepare an output stream to write the PDF into memory
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            Document document = new Document();
            PdfWriter.getInstance(document, out);
            document.open();

            // 3. Add the certificate title
            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 24);
            Paragraph title = new Paragraph("Certificate of Completion", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);

            document.add(new Paragraph(" ")); // Spacer line

            // 4. Add the student and course information
            Font contentFont = FontFactory.getFont(FontFactory.HELVETICA, 14);
            document.add(new Paragraph("This certifies that " + student.getEmail()
                    + " has successfully completed the course:", contentFont));
            document.add(new Paragraph(course.getName(),
                    FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16)));

            document.add(new Paragraph(" ")); // Spacer

            // 5. Generate a QR code from external API (you can replace this URL with a validation endpoint)
            String qrText = "https://localhost:8080/certificates/validate?course=" + course.getId() + "&user=" + student.getId();
            String encodedQrText = URLEncoder.encode(qrText, StandardCharsets.UTF_8);
            String qrApiUrl = "https://api.qrserver.com/v1/create-qr-code/?data=" + encodedQrText + "&size=150x150";

            // 6. Fetch and insert QR image into the PDF
            RestTemplate restTemplate = new RestTemplate();
            byte[] qrImageBytes = restTemplate.getForObject(qrApiUrl, byte[].class);
            Image qrCode = Image.getInstance(qrImageBytes);
            qrCode.setAlignment(Image.ALIGN_CENTER);
            document.add(qrCode);

            document.add(new Paragraph(" ")); // Spacer

            // 7. Footer text
            Paragraph footer = new Paragraph("Generated by Online Course Organizer", contentFont);
            footer.setAlignment(Element.ALIGN_CENTER);
            document.add(footer);

            // 8. Finalize the PDF document
            document.close();

            // 9. Return the generated PDF as a downloadable resource
            return new ByteArrayResource(out.toByteArray());

        } catch (Exception e) {
            // If any step fails, return a runtime exception
            throw new RuntimeException("Error generating certificate: " + e.getMessage());
        }
    }
}
